package ke.co.coverapp.coverapp.utility.network;

import android.view.View;

import com.android.volley.AuthFailureError;
import com.android.volley.DefaultRetryPolicy;
import com.android.volley.NetworkResponse;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.RequestFuture;
import com.android.volley.toolbox.StringRequest;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import ke.co.coverapp.coverapp.R;
import ke.co.coverapp.coverapp.application.MyApplication;
import ke.co.coverapp.coverapp.log.L;
import ke.co.coverapp.coverapp.network.VolleySingleton;
import ke.co.coverapp.coverapp.utility.ParseUtil;
import ke.co.coverapp.coverapp.utility.ValidationUtil;

import static ke.co.coverapp.coverapp.pojo.Keys.keys;

/**
 * Created by Clifford Owino on 9/14/2016.
 */
public class RequestUtil {
    static String token = MyApplication.readFromPreferences(MyApplication.getAppContext(), keys.ACCESS_TOKEN, ValidationUtil.getDefault());

    public static JSONObject requestFeatures(RequestQueue requestQueue, int product) {

        JSONObject response = null;
        RequestFuture<JSONObject> requestFuture = RequestFuture.newFuture();

        JsonObjectRequest request = new JsonObjectRequest(Request.Method.GET,
                "http://api.coverappke.com/feature/product/"+product,
                (String)null, requestFuture, requestFuture){
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                HashMap<String, String> map = new HashMap<String, String>();
                map.put("Authorization", "Bearer "+ token);
                return map;
            }

        };

        requestQueue.add(request);
        try {
            response = requestFuture.get(30000, TimeUnit.MILLISECONDS);
        } catch (InterruptedException e) {
            L.m(e + "");
        } catch (ExecutionException e) {
            L.m(e + "");
        } catch (TimeoutException e) {
            L.m(e + "");
        }
        return response;
    }

    public static JSONObject requestPrices(RequestQueue requestQueue){

        final JSONObject[] responseJSONObject = new JSONObject[1];

        StringRequest request = new StringRequest(Request.Method.GET, "http://api.coverappke.com/feature/prices ", new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                L.m(response);

                JSONObject pricesJson = null;
                try {
                    pricesJson = new JSONObject(response);


                    if (ParseUtil.contains(pricesJson, keys.APP_PRICES)) {

                        L.t(MyApplication.getAppContext(), pricesJson.getString(keys.APP_PRICES));

                        responseJSONObject[0] = pricesJson;

                    } else {

                        L.t(MyApplication.getAppContext(), "Prices successfully fetched");

                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {

            }
        }) {
        };
        request.setRetryPolicy(new DefaultRetryPolicy(
                keys.MY_SOCKET_TIMEOUT_MS,
                keys.MY_DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        VolleySingleton.getInstance().getRequestQueue().add(request);

        return responseJSONObject[0];
    }
}
